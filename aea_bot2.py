import os
import os.path
import json
import re
import sys
import time
import random
from datetime import timedelta
from datetime import datetime
import traceback
from collections import Counter
import threading
import io
import binascii

try:
    from vosk import Model, KaldiRecognizer
    import telebot
    from telebot import types
    from telebot.types import InlineKeyboardButton
    from telebot import formatting
    from collections import defaultdict
    import psutil
    import schedule
    import requests
    from requests import get
    import subprocess
    from loguru import logger
    import sqlite3
    from PIL import Image, ImageDraw, ImageFont
    from googletrans import Translator
except ImportError:
    print('\33[31m error no libs start auto install (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫—É)')
    print('full error message>>\n'+traceback.format_exc())
    i=0
    if os.name == 'nt':
        print('\33[0m pip upgrade')
        i=i+os.system('python3 -m pip install --upgrade pip')
        print('\33[0m libs install')
        i=i+os.system('pip install -r requirements.txt')
        if i < 1:
            print('\33[31m suppress (—É—Å–ø–µ—à–Ω–æ)')
        else:
            print('\33[31m error install (—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ )')
    else: 
        i=i+os.system('python3 -m venv venv')
        print('\33[0m pip upgrade')
        i=i+os.system("./venv/bin/python3 -m pip install --upgrade pip")
        print('\33[0m libs install')
        i=i+os.system('pip3 install -r requirements.txt') 
        if i<1:
            print('\33[32m suppress (—É—Å–ø–µ—à–Ω–æ)')
        else:
            print('\33[32m error install (—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ )')

try:
    with open("TOKEN", "r") as t:
        TOKEN=t.read().replace(' ','')
except FileNotFoundError:
    print('\33[31m error no file TOKEN ,the file auto creat please write you token to file TOKEN \33[0m')
    with open(os.path.join(os.getcwd(), 'TOKEN'), 'w') as f:
        f.write('please write you token')
    sys.exit(1)
    
def umsettings():
    global bambam,delet_messadge,admin_grops,SPAM_LIMIT,SPAM_TIMEFRAME,BAN_AND_MYTE_COMMAND,CONSOLE_CONTROL
    bambam=False
    delet_messadge=True
    admin_grops="-1002284704738"
    SPAM_LIMIT = 10 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    SPAM_TIMEFRAME = 4  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∞–º–∞
    BAN_AND_MYTE_COMMAND = True
    CONSOLE_CONTROL = False

try:
    with open("settings.json", "r") as json_settings:
        settings= json.load(json_settings)
except:
    logger.debug('error settings import ')
    umsettings()
    
help_user = '/report ‚Äî –∑–∞–±–∞–Ω—å –¥–µ–±–∏–ª–∞ –≤ —á–∞—Ç–µ\n/—è ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n/info ‚Äî —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n/translite (—Å–æ–∫—Ä–∞—â–µ–Ω–æ /t) ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫:`/t –ª—é–±–æ–π —Ç–µ–∫—Å—Ç:eg` –ø–æ—Ç–¥–µ—Ä–∂–∏–≤–∞—é—Ç—å—Å—è bin –∏ hex –∫–æ–¥–∏—Ä–æ–≤–∫–∏\n/download (—Å–æ–∫—Ä–∞—â–µ–Ω–æ /dow) ‚Äî —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤,–ì–° –∏ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–µ–∫ –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä: `/download png` \n/to_text ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –ì–° –≤ —Ç–µ–∫—Å—Ç\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ [help] –∏ –Ω–∞—à–∏ —Ö–µ–ª–ø–µ—Ä—ã –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º \n/admin_command –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' 
admin_command = '/monitor ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ \n/warn ‚Äî –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∞ 1\n/reput ‚Äî –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∞ 1\n/data_base ‚Äî –≤—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n/info ‚Äî —É–∑–Ω–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/ban ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–∞–Ω –ø—Ä–∏–º–µ—Ä: `/–±–∞–Ω reason:–ø–æ —Ä–æ—Ñ–ª—É`\n/–º—É—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º—É—Ç `/–º—É—Ç reason:–ø—Ä–∏—á–∏–Ω–∞ time:1.h` .h ‚Äî —á–∞—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) , .d ‚Äî –¥–Ω–∏ , .m ‚Äî –º–∏–Ω—É—Ç—ã\n/blaklist ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n/unblaklist ‚Äî —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞'

logse="nan"
i=0
admin_list=["@HITHELL","@mggxst"]
random.seed(round(time.time())+int(round(psutil.virtual_memory().percent)))#—Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–¥–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("cats_message.log", level="TRACE", encoding='utf-8', rotation="500 MB")
try:
    bambam=bool(settings['bambam'])
    delet_messadge=bool(settings['delet_messadge'])
    admin_grops=str(settings['admin_grops'])
    SPAM_LIMIT=int(settings['spam_limit'])
    SPAM_TIMEFRAME=int(settings['spam_timer'])
    BAN_AND_MYTE_COMMAND=bool(settings['ban_and_myte_command'])
    CONSOLE_CONTROL=bool(settings['console_control'])
except:
    umsettings()
    logger.debug('error settings init')

bot = telebot.TeleBot(TOKEN)
#updater = Updater(token=TOKEN)
#dispatcher = updater.dispatcher
warn=0
print(os.getcwd())

if os.path.exists(os.path.join(os.getcwd(), 'asets' ,'hello.gif')):
    print('gif OK')
else:
    warn=warn+1
    print('error no hello.gif')
if os.path.exists(os.path.join(os.getcwd(), 'settings.json')):
    print('settings.json OK')
else:
    warn=warn+1
    print('error no settings.json')
if os.path.exists(os.path.join(os.getcwd(), 'requirements.txt')) != True:
    warn=warn+1
if os.path.exists(os.path.join(os.getcwd(), 'Users_base.db')):
    print('data base ok')
else:
    warn=warn+1
    print("error no bata base ")
if warn >=3:
    bot.send_message(admin_grops, f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–ø–æ–ª–∞–¥–∫–∏\nwarn level:{warn}")

date = datetime.now().strftime("%H:%M")

bot.send_message(admin_grops, f"–±–æ—Ç –∑–∞–ø—É—â–µ–Ω ")
logger.info("–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
def monitor_resources():
    response_time,response_time,cpu_percent,ram_percent,disk_percent=0,0,0,0,0
    popitki=5
    #–ø–∏–Ω–≥ –≤ —Å—Ä–µ–¥–Ω–µ–º 5 (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤ popitki )–ø–æ–ø—ã—Ç–æ–∫
    for i in range(popitki):
        start_time = time.time()
        response=requests.get('https://core.telegram.org/')
        if response.status_code==200:
            scode= ''
            pass
        else:
            scode=f' status code {response.status_code}'
        response_time+= time.time() - start_time
        cpu_percent += float(psutil.cpu_percent())
        ram_percent +=float(psutil.virtual_memory().percent)
        if sys.platform.startswith('win'):
            disk_percent +=float(psutil.disk_usage('C:/').percent)
        else:
            disk_percent +=float(psutil.disk_usage('/').percent)
    shutka=' '
    if cpu_percent==round(cpu_percent/popitki,1):
        shutka='–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —à—è —Ä–≤–∞–Ω–µ—Ç ü§Ø'
    print(f"CPU: {round(cpu_percent/popitki)}%,\nRAM: {round(ram_percent/popitki)}%,\nDisk: {round(disk_percent/popitki)}%,\nPing: {response_time} \n{shutka}")
    return round(cpu_percent/popitki,1), round(ram_percent/popitki,1), round(disk_percent/popitki,1), str(str(round(response_time/popitki,3))+'s'+scode+f'\n{shutka}')

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help','–ø–æ–º–æ—â—å','sos'])
def send_help(message):
    if message.date - time.time() <= 60:
        bot.reply_to(message, help_user)

@bot.message_handler(commands=['admin_command'])
def handle_warn(message):
    if message.date - time.time() <= 60:
        bot.reply_to(message, admin_command)
    
# –ö–æ–º–∞–Ω–¥–∞ /log
@bot.message_handler(commands=['log'])
def send_help(message):
    try:
        bot.send_document(message.chat.id,reply_to_message_id=message.message_id,document=open('cats_message.log', 'r',encoding='utf-8', errors='replace'))
    except Exception as e:
        bot.send_message(admin_grops,f"error logs file>> {e} ")
        logger.error(f"log error >> {e}")
        
#–æ—á–∏—â–µ–Ω–∏–µ –ª–æ–≥–æ–≤ /null_log
@bot.message_handler(commands=['null_log'])
def send_help(message):
    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator', 'administrator'] or message.from_user.id =='5194033781':
        try:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
            if message.chat.id==admin_grops or message.from_user.id =='5194033781':
                if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator', 'administrator']:
                    bot.send_message(admin_grops,f"–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –æ—á–∏—Å—Ç–∏–ª : @{message.from_user.username}")
                    file = open('cats_message.log', "w")
                #    –ò–∑–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    file.write("log null")
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    file.close()
                    logger.debug(f"–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã, –æ—á–∏—Å—Ç–∏–ª:  @{message.from_user.username}")
                else:
                    bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])
            else:
                bot.reply_to(message,'–∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        except Exception as e:
            bot.send_message(admin_grops,f"error logs file>> {e} ")
            logger.error(f"log null error >> {e}")
    else:
        bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])
#–æ—á–∏—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤  /null_report
@bot.message_handler(commands=['null_report'])
def send_help(message):
    try:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator', 'administrator'] or message.from_user.id =='5194033781':
            try:
                del report_data
            except:
                pass
            bot.send_message(admin_grops,f"report –æ—á–∏—â–µ–Ω –æ—á–∏—Å—Ç–∏–ª : @{message.from_user.username}")
            logger.debug(f"report –æ—á–∏—â–µ–Ω, –æ—á–∏—Å—Ç–∏–ª:  @{message.from_user.username}")
        else:
            bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])
    except Exception as e:
        bot.send_message(admin_grops,f"error >> {e} ")
        logger.error(f"error >> {e}")
        
#report data —Å–ø–∏—Å–æ–∫ —Å –∫–æ–ª.–≤–æ. —Ä–µ–ø–æ—Ä—Ç–∞–º–∏ /report_data 
@bot.message_handler(commands=['report_data'])
def send_help(message):
    try:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator', 'administrator'] or message.from_user.id =='5194033781':
            bot.send_message(message.chat.id,f"report data: {report_data}")
            logger.debug(f"report data: {report_data}")
        else:
            bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç','—Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–ª—è —Ç–µ–±—è'][random.randint(0,4)])
    except Exception as e:
        bot.send_message(admin_grops,f"error >> {e} ")
        logger.error(f"error >> {e}")
# –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ /cler 
@bot.message_handler(commands=['cls','clear'])
def send_help(message):
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator', 'administrator'] or message.from_user.id =='5194033781': 
            bot.send_message(admin_grops,f"—ç–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω, –æ—á–∏—Å—Ç–∏–ª : @{message.from_user.username}")
            os.system('clear')
            logger.debug(f"—ç–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω –æ—á–∏—Å—Ç–∏–ª:  @{message.from_user.username}")
    else:
        bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])

# –ö–æ–º–∞–Ω–¥–∞ /monitor    
@bot.message_handler(commands=['monitor','–º–æ–Ω–∏—Ç–æ—Ä'])
def monitor_command(message):
    if message.date - time.time() <= 60:
        cpu_percent, ram_percent, disk_percent, response_time = monitor_resources()
        bot.reply_to(message, f"CPU: {cpu_percent}%\nRAM: {ram_percent}%\nDisk: {disk_percent}%\nPing: {response_time}")

# –ö–æ–º–∞–Ω–¥–∞ /test 
@bot.message_handler(commands=['test'])
def monitor_command(message):
    test=''
    test+=os.getcwd()+'\n'
    swap = psutil.swap_memory()
    if os.path.exists(os.path.join(os.getcwd(), 'asets', 'hello.gif')):
        test=test+'gif OK\n'
    else:
        test=test+'error no gif\n'
    if os.path.exists(os.path.join(os.getcwd(), 'Users_base.db')):
        test=test+'data base OK\n'
    else:
        test=test+"error no bata base \n"
    if os.path.exists(os.path.join(os.getcwd(), 'cats_message.log')):
        test=test+'messege log OK\n'
    else:
        test=test+'warning no messege log \n'
    if os.path.exists(os.path.join(os.getcwd(), 'asets' , 'Roboto_Condensed-ExtraBoldItalic.ttf')):
        test=test+'Roboto_Condensed-ExtraBoldItalic —à—Ä–∏—Ñ—Ç OK\n'
    else:
        test=test+'error no Roboto_Condensed-ExtraBoldItalic \n'
    if os.path.exists(os.path.join(os.getcwd(),'settings.json')):
        test=test+'cofig file OK\n'
    else:
        test=test+'error no config file \n'
    test=test+f"ID> {message.from_user.id}\n"
    test=test+f"ID admin grup> {admin_grops}\n"
    test=test+f"IP>{get('https://api.ipify.org').content.decode('utf8')}\n"
    cpu_percent, ram_percent, disk_percent, response_time = monitor_resources()
    bot.send_message(message.chat.id, f"CPU: {cpu_percent}%\nRAM: {ram_percent}%\nDisk: {disk_percent}%\nPing: {response_time}\n—Ñ–∞–π–ª –ø–æ–¥–∫–∞—á–∫–∏: {swap.percent}% ({swap.total / 1073741824:.2f} GB)\n{test} \nadmin > {bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator']}")

# –ö–æ–º–∞–Ω–¥–∞ /time_server
@bot.message_handler(commands=['time_server'])
def time_server_command(message):
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    bot.send_message(message.chat.id, f"–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {current_time}")    
#–∫–æ–º–∞–Ω–¥–∞ /–ø—Ä–∞–≤–∏–ª–æ 
@bot.message_handler(commands=['–ø—Ä–∞–≤–∏–ª–æ','–ø—Ä–∞–≤–∏–ª–∞','–∑–∞–∫–æ–Ω','rules'])
def pravilo(message):
    if message.date - time.time()<=60:
        pass
    #    markup = types.InlineKeyboardMarkup()
    #    button1 = types.InlineKeyboardButton("–ø—Ä–∞–≤–∏–ª–∞", url='https://xhak2215.github.io/aea_rules.github.io/')
    #    markup.add(button1)
    #    bot.reply_to(message, '–ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ web —Å—Ç—Ä–∞–Ω–∏—Ü—É', reply_markup=markup)
    
# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø–æ—Ä—Ç–∞—Ö
report_data =  {}
report_user=[]
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /report
@bot.message_handler(commands=['report','—Ä–µ–ø–æ—Ä—Ç','fufufu'])
def handle_report(message):
    n=5
    if message.reply_to_message:
        chat_id = message.chat.id#–∏–Ω–µ—Ü–∏–∞–ª–µ–∑–∞—Ü—ã—è –≤—Å—è–∫–æ–π —Ö—Ä–µ–Ω–∏
        reported_message_text = message.reply_to_message.text
        report_user.append(message.from_user.id)
        if chat_id not in report_data:#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–º–µ—Ç–∫–∏ chat_id
            report_data[chat_id] = {'responses': set()}
            
        report = report_data[chat_id]
        #–¥–æ–±–∞–≤–ª—è–µ–º id –±–∞–ª–±–µ—Å–∞ or –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –≤ —Ç–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏ –°—Ç–∞–ª–∏–Ω–∞ report
        report['responses'].add(message.reply_to_message.from_user.id) 
        ban_ded=message.reply_to_message.from_user.id
        report_chat=message.chat.id
    
        message_to_report=str(report_chat).replace("-100", "")
        if len(report['responses'])>1:
            data_base(chat_id,message.reply_to_message,ps_reputation_upt=1)
        coment_message=''
        coment=message.text.replacce('/—Ä–µ–ø–æ—Ä—Ç','').replacce('/report','').replacce('/fufufu','').split(' ')
        if len(coment)>1:
            if len(coment[1])>2:
                coment_message=f'| –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{coment[1]}'

        if message.reply_to_message.content_type == 'sticker':
            bot.send_message(admin_grops,f"–ø–æ—Å–ª–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç –Ω–∞ >> tg://user?id={message.reply_to_message.from_user.id}, @{message.reply_to_message.from_user.username} {coment_message}| https://t.me/c/{message_to_report}/{message.reply_to_message.message_id} | ‚Üì—Å—Ç–∏–∫–µ—Ä‚Üì")
            logger.info(f"–ø–æ—Å–ª–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç –Ω–∞ >>  @{message.reply_to_message.from_user.username} {coment_message}| https://t.me/c/{message_to_report}/{message.reply_to_message.message_id} —Å—Ç–∏–∫–µ—Ä id > {message.reply_to_message.sticker.file_id}")
            bot.send_sticker(admin_grops, message.reply_to_message.sticker.file_id)
        else:
            bot.send_message(admin_grops,f"–ø–æ—Å–ª–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç –Ω–∞ >> tg://user?id={message.reply_to_message.from_user.id}, @{message.reply_to_message.from_user.username} {coment_message}| https://t.me/c/{message_to_report}/{message.reply_to_message.message_id} | —Å–æ–æ–±—â–µ–Ω–∏–µ>> {reported_message_text if message.content_type == 'text' else message.content_type}")
            logger.info(f"–ø–æ—Å–ª–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç –Ω–∞ >>  @{message.reply_to_message.from_user.username} {coment_message}| https://t.me/c/{message_to_report}/{message.reply_to_message.message_id} —Å–æ–æ–±—â–µ–Ω–∏–µ>> {reported_message_text if message.content_type == 'text' else message.content_type}")

        bot.reply_to(message,['–∞–¥–º–∏–Ω—ã –ø–æ—Å–º–æ—Ç—Ä—è—Ç','–∞–º–æ–Ω —É–∂–µ –≤ –ø—É—Ç–∏','–¥–∞ –ø—Ä–∏–¥–µ—Ç –∂–µ –∞–¥–º–∏–Ω –∏ –ø–æ–∫–∞—Ä–∞–µ—Ç –Ω–µ—á–µ—Å—Ç–∏–≤—Ü–µ–≤ –±–∞–Ω–æ–º','–∫—Ç–æ —Ç—É—Ç –Ω–∞—Ä—É—à–∞–µ—Ç?','—Å—Ç–æ—è—Ç—å –±–æ—è—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–¥–º–∏–Ω','–∑–∞–ø–∏—Å–∞–ª ...'][random.randint(0,4)])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±–∞–Ω–∞
        reput=data_base(message.chat.id,ban_ded)[1]
        if reput > 2:
            n=4
        elif reput < 0:
            n=6
        else:
            n=5
        if len(report['responses']) >= n:
            for i in range(len(report_user)):
                data_base(message.chat.id,report_user[i],ps_reputation_upt=-1)
#           bot.kick_chat_member(chat_id, user_to_ban, until_date=int(time.time()) + 86400)
            for i in range(len(admin_list)):
                if i >0:
                    teg+=f",{admin_list[i]}"
                else:
                    teg+=f"{admin_list[i]}"
            bot.send_message(admin_grops,f"{teg} –≥—Ä—É–±—ã–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å ! >> @{message.reply_to_message.from_user.username} | https://t.me/c/{message_to_report}/{message.reply_to_message.message_id}")
            if delet_messadge:
                bot.delete_message(message.chat.id,message.message_id)
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ—Ä—Ç–µ
        del report_data[chat_id]
    else: 
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.")

def fetch_data_by_column_and_row(column_name, row_index):
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('Users_base.db')
    cursor = connection.cursor()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–æ–∫–∏
        query = f'SELECT {column_name} FROM Users LIMIT 1 OFFSET ?'
        cursor.execute(query, (row_index,))  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂
        result = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result:
            return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        else:
            return None
    except sqlite3.Error as e:
        logger.error(f'get data base error >> {e}')
        return 'get data base error >>'+e
    
@bot.message_handler(commands=['config','–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'])
def configfile(message):
    try:
        f=open(f'{os.getcwd()}/settings.json', 'r',encoding='utf-8', errors='replace')
        out=f.read()
        if out=='' or out==None:
            out='none'
        bot.reply_to(message,out)
        f.close()
        if  '-r' in message.text :
            try:
                with open("settings.json", "r") as json_settings:
                    settings= json.load(json_settings)
                try:
                    bambam=bool(settings['bambam'])
                    delet_messadge=bool(settings['delet_messadge'])
                    admin_grops=str(settings['admin_grops'])
                    SPAM_LIMIT=int(settings['spam_limit'])
                    SPAM_TIMEFRAME=int(settings['spam_timer'])
                    BAN_AND_MYTE_COMMAND=bool(settings['ban_and_myte_command'])
                    CONSOLE_CONTROL=bool(settings['console_control'])
                    logger.info('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ –∏–Ω–∏—Ü–∏–∞–ª–µ–∑–∏—Ä–æ–≤–∞–Ω—ã')
                except:
                    bot.reply_to(message,'–Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ')
                    umsettings()
                    logger.debug('error settings init')
            except:
                bot.reply_to(message,'–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫')
                logger.debug('error settings reload ')
    except Exception as e:
        try:
            f.close()
        except:pass
        bot.reply_to(message,f"error logs file>> {e} ")
        logger.error(f"config error >> {e}")

@bot.message_handler(commands=['data_base'])
def send_help(message):
    datas=''
    try:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
            connection = sqlite3.connect('Users_base.db')
            cursor = connection.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ Users
            cursor.execute('SELECT * FROM Users')
            rows = cursor.fetchall() 
            # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
            for column in rows:
                datas += str(column)+'\n'
            connection.close()
            bot.send_message(message.chat.id,f"data base>>\n‚Ññ | chat id |r| user id|num_message|ar|data\n----------------------------------------\n{datas}")
            logger.debug(f"–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö :\n{datas}")
        else:
            bot.reply_to(message,f"—Ç—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω \n—Ç—ã –Ω–µ –∞–¥–º–∏–Ω")
    except Exception as e:
        bot.send_message(admin_grops,f"error >> {e} ")
        logger.error(f"error >> {e}")
        
def update_user(id, chat, reputation=None, ps_reputation=None, soob_num=None ,day_message_num=None):
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('Users_base.db', timeout=10)
    cursor = connection.cursor()
    cursor.execute("PRAGMA journal_mode=WAL;")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    query = "UPDATE Users SET "
    params = []
    updates = []
    
    if reputation is not None:
        updates.append("reputation = ?")
        params.append(reputation)
    
    if ps_reputation is not None:
        updates.append("auto_reputation = ?")
        params.append(ps_reputation)
    
    if soob_num is not None:
        updates.append("num_message = ?")
        params.append(soob_num)
        
    if soob_num is not None:
        updates.append("day_message = ?")
        params.append(day_message_num)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not updates:
        connection.close()
        logger.warning("update_user –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return None
    
    query += ", ".join(updates)
    query += " WHERE warn_user_id = ? AND chat_id = ?"
    params.append(id)
    params.append(chat)
    
    try:
        cursor.execute(query, params)
        connection.commit()
    except Exception as e:
        logger.error(f"Error updating user: {e}")
        return None
    finally:
        connection.close()
        
def data_base(chat_id, warn_user_id, nfkaz=0, soob_num=0, ps_reputation_upt=0, time_v=0) -> list: # data_base(message.chat.id,message.from_user.id,0,0,0) (–≤—ã–∑–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑—ã ) –≤—ã—Ö–æ–¥: [resperens,ps_reputation_new,int(soob_num),time.time()] (—Ä–µ–ø—É—Ç–∞—Ü–∏—è,2 —Ä–µ–ø—É—Ç–∞—Ü–∏—è_ps,–∫–∞–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π,–≤—Ä–µ–º—è –≤—Ö–æ–¥–∞) 
    try:
        resperens = 5
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect('Users_base.db',timeout=10)
        cursor = connection.cursor()
        cursor.execute("PRAGMA journal_mode=WAL;")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS Users (
            id INTEGER PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            reputation INTEGER NOT NULL,
            warn_user_id INTEGER NOT NULL,
            warn_time INTEGER ,
            num_message INTEGER NOT NULL,
            day_message INTEGER NOT NULL,
            auto_reputation INTEGER NOT NULL,
            vhod_data INTEGER NOT NULL,
            temp REAL
        )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute('CREATE INDEX IF NOT EXISTS warn_user_id_index ON Users (warn_user_id)')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º warn_user_id
        cursor.execute('SELECT * FROM Users WHERE warn_user_id = ? AND chat_id = ?', (warn_user_id,chat_id))
        result = cursor.fetchone()
        ps_reputation_new=0+ps_reputation_upt
        
        if result is not None:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            current_reputation = result[2]  # —Ä–µ–ø—É—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—Ä–µ—Ç—å–µ–º —Å—Ç–æ–ª–±—Ü–µ
            ps_reputation = result[7]
            chat = result[1]  # id —á–∞—Ç–∞
            text = result[5] # –∫–æ–ª.–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

            if text is None:
                text=1
            if current_reputation is None:
                current_reputation=0

            if chat == chat_id:
                ps_reputation_new=ps_reputation+ps_reputation_upt
                new_reputation = current_reputation - nfkaz
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_user(warn_user_id, chat, new_reputation, ps_reputation_new, text+soob_num ,result[6]+soob_num)# –ü–µ—Ä–µ–¥–∞–µ–º id,chat –∏ –¥–∞–Ω–Ω—ã–µ  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                connection.commit()
                connection.close()
                return [new_reputation,ps_reputation_new,int(text+soob_num),result[8],result[6]]
            else:
                resperens = 5 - nfkaz
                cursor.execute('INSERT INTO Users (chat_id, reputation, warn_user_id, num_message, auto_reputation, vhod_data ,day_message) VALUES (?, ?, ?, ?, ?, ?, ?)', (chat_id, resperens, warn_user_id, soob_num, ps_reputation_new, time_v, soob_num))
                connection.commit()
                connection.close()
                return [resperens,ps_reputation_new,int(text+soob_num),time_v,result[6]]
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            resperens = 5 - nfkaz
            cursor.execute('INSERT INTO Users (chat_id, reputation, warn_user_id, num_message, auto_reputation, vhod_data ,day_message) VALUES (?, ?, ?, ?, ?, ?, ?)', (chat_id, resperens, warn_user_id, soob_num, ps_reputation_new, time_v, soob_num))
            connection.commit()
            connection.close()
            return [resperens,ps_reputation_new,int(soob_num),time_v,]

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}\n{traceback.format_exc()}')
        connection.close()
        bot.send_message(admin_grops, f"data_base error>> {e}")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.close()
        
def set_day_message():#—è –Ω–µ —Å–º–æ–≥ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —è –ø–æ—Ö–æ–¥—É —Ç—É–ø–æ–π 
    file_path = os.path.join(os.getcwd(), 'asets', 'set_day_message_time.json')
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É asets, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    try:
        if os.path.isfile(file_path):
            with open(file_path, "r") as json_settings:
                data = json.load(json_settings)
                timer = data.get('reset_time', 0)
        else:
            timer = 0
    except (json.JSONDecodeError, KeyError):
        timer = 0
    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫
    if timer == 0 or time.time() - timer >= 1*86400:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            connection = sqlite3.connect('Users_base.db', timeout=10)
            cursor = connection.cursor()
            cursor.execute("PRAGMA journal_mode=WAL;")
            cursor.execute('UPDATE Users SET day_message = 0')
            connection.commit()
        except sqlite3.Error as e:
            print(f"Database error: {e}")
            return False
        finally:
            if connection:
                connection.close()
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
        try:
            with open(file_path, 'w') as json_settings:
                json.dump({"reset_time": time.time()}, json_settings)
            return True
        except IOError as e:
            print(f"File write error: {e}")
            return False
    return False
    
def status(rec):
    if rec >= 1000:
        status=["—á–∏—Ç—ã –≤—ã—Ä—É–±–∞–π ! ",'–∫–∞–∫ —Ç–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ ,—á–∏—Ç—ã ?'][random.randint(0,1)]
    elif rec <=1:
        status=["—Ç—ã –ø–ª–æ—Ö–æ–π –∏—Å–ø—Ä–∞–≤–ª—è–π—Å—è üò°",'–∞–π –∞–π –∞–π –Ω–∞—Ä—É—à–∞–µ–º','—Ñ—É —Ç–∞–∫–∏–º –±—ã—Ç—å','–∞ –Ω—É –Ω–µ –Ω–∞—Ä—É—à–∞–π ','–∑–∞—á–µ–º –Ω–∞—Ä—É—à–∞–ª –ø—Ä–∞–≤–∏–ª —á—Ç–æ –ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å'][random.randint(0,4)]
    elif rec>=5:
        status=['—Ç—ã —Ö–æ—Ä–æ—à–∏–π üòä','—Ç—ã —É–º–Ω–∏—Ü–∞ üëç','–∑–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à—ã–π —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! ','—Ö–∞—Ä–æ—à'][random.randint(0,2)]
    elif rec>=10:
        status=['–ø–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—å—Å—è –≤–∞–º–∏','–±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ–π –≤–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä–∏—â!','—Ç—ã —Ö–æ—Ä–æ—à–∏–π üòä','—Ç—ã —É–º–Ω–∏—Ü–∞ üëç'][random.randint(0,3)]
    elif rec<=0:
        status=['–Ω—É —ç—Ç–æ –±–∞–Ω','–≤ –±–∞–Ω —Ç–µ–±—è','–∞–π –∞–π –∞–π bam bam bam –∂–¥–µ—Ç —Ç–µ–±—è'][random.randint(0,2)]
    elif rec==None:
        status='–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö '
    else:
        status=["üòê",'–Ω—É –Ω–æ—Ä–º','–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π','–Ω–µ –±–µ–∑ –≥—Ä–µ—Ö–∞'][random.randint(0,3)]
    return status

@bot.message_handler(commands=['—è', 'me'])
def send_statbstic(message):
    if message.date - time.time()<=60:
        data=data_base(message.chat.id,message.from_user.id,soob_num=1)
        bot.reply_to(message, f"–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {data[0]} \n{status(data[0])}\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[2]}")

warn_data= {}
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ /warn
@bot.message_handler(commands=['warn'])
def handle_warn(message):
    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id==5194033781:
        if message.reply_to_message:

            chat_id = message.chat.id#–∏–Ω–µ—Ü–∏–∞–ª–µ–∑–∞—Ü—ã—è –≤—Å—è–∫–æ–π —Ö—Ä–µ–Ω–∏
            warn_message = message.reply_to_message.from_user.id
            warn_message_text = message.reply_to_message.text
            message_to_warp=str(chat_id).replace("-100", "")

            reputation=data_base(message.chat.id,warn_message,1,ps_reputation_upt=2)[0]
            bot.reply_to(message,f'—Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–µ–Ω–∞ \n—Ç–µ–∫—É—â—è—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–µ–≤–∞—Ç–µ–ª—è:{reputation}')
            bot.send_message(admin_grops,f"—Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–µ–Ω–∞ >> tg://user?id={message.reply_to_message.from_user.id}, @{message.reply_to_message.from_user.username} | https://t.me/c/{message_to_warp}/{message.reply_to_message.message_id} | —Å–æ–æ–±—â–µ–Ω–∏–µ>> {warn_message_text if message.content_type == 'text' else message.content_type}")
            logger.debug(f"—Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–µ–Ω–∞ >>  @{message.reply_to_message.from_user.username} | https://t.me/c/{message_to_warp}/{message.reply_to_message.message_id} —Å–æ–æ–±—â–µ–Ω–∏–µ>> {warn_message_text if message.content_type == 'text' else message.content_type}")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–Ω–∏–∑–∏–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é @{message.reply_to_message.from_user.username} ") 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è –º—É—Ç–∞
            if bambam==True:
                if reputation <= 0:
                    #–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 24 —á–∞—Å–∞ 
                    bot.restrict_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    until_date=timedelta(hours=24),
                    can_send_messages=False
                    )
                    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.")        
#           bot.kick_chat_member(chat_id, user_to_ban, until_date=int(time.time()) + 86400)
                bot.send_message(admin_grops,f"–≥—Ä—É–±—ã–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å ! >> tg://user?id={warn_message} | https://t.me/c/{message_to_warp}/{message.reply_to_message.message_id}")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é") 
    else:
        bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])
                    
@bot.message_handler(commands=['reput'])
def handle_warn(message):
    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
        if message.reply_to_message:
            #–∏–Ω–µ—Ü–∏–∞–ª–µ–∑–∞—Ü—ã—è –≤—Å—è–∫–æ–π —Ö—Ä–µ–Ω–∏ 
            warn_message_text = message.reply_to_message.text
            user=message.reply_to_message.from_user.id
            warn_chat=message.chat.id
            message_to_warp=str(warn_chat).replace("-100", "")

            data=data_base(message.chat.id,user,-1,0,-2)#–ø–∞—Ä—Ç–∏—è –¥–æ–≤–æ–ª—å–Ω–∞ –≤–∞–º–∏ +1 –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            bot.reply_to(message,f'—Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∞ \n—Ç–µ–∫—É—â—è—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–µ–≤–∞—Ç–µ–ª—è:{data[0]}')
            bot.send_message(admin_grops,f"—Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∞ >> tg://user?id={message.reply_to_message.from_user.id}, @{message.reply_to_message.from_user.username} | https://t.me/c/{message_to_warp}/{message.reply_to_message.message_id} | —Å–æ–æ–±—â–µ–Ω–∏–µ>> {warn_message_text if message.content_type == 'text' else message.content_type}")
            logger.debug(f"—Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∞ >>  @{message.reply_to_message.from_user.username} | https://t.me/c/{message_to_warp}/{message.reply_to_message.message_id} —Å–æ–æ–±—â–µ–Ω–∏–µ>> {warn_message_text if message.content_type == 'text' else message.content_type}")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–≤—ã—Å–∏–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é ") 
        else: 
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é")  
    else:
        bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])
        
@bot.message_handler(commands=['info','user'])#—É–∑–Ω–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
def handle_warn(message):
#    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
    if message.reply_to_message:
        data_v=''
        i=0
        c=''
        chat_id = message.chat.id# –∏–Ω–µ—Ü–∏–∞–ª–µ–∑–∞—Ü—ã—è –≤—Å—è–∫–æ–π —Ö—Ä–µ–Ω–∏ 
        user=message.reply_to_message.from_user.id
        #message_to_warp=str(warn_chat).replace("-100", "")
        data=data_base(chat_id,user)
        if '-all' in str(message.text).lower():
            bot.reply_to(message,f'ID:{user}\n—Ä–µ–ø—É—Ç–∞—Ü–∏—è:{data[0]}\n–∞–≤—Ç–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—è:{data[1]}\n—Å–æ–æ–±—â–µ–Ω–∏–µ:{data[2]}\ntime:{datetime.fromtimestamp(data[3]).strftime('%Y-%m-%d %H:%M:%S')}')
            return
        if str(data[3]) != str(0):
            if data[3]>=86400:
                if round((time.time()-data[3])/86400)==1:
                    c='–¥–µ–Ω—å –Ω–∞–∑–∞–¥'
                else:
                    c='–¥–Ω–µ–π –Ω–∞–∑–∞–¥' 
                i=str(round((time.time()-data[3])/86400))+ c
            elif data[3]>=3600:
                if round((time.time()-data[3])/3600)==1:
                    c='—á–∞—Å –Ω–∞–∑–∞–¥'
                else:
                    c='—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥' 
                i=str(round((time.time()-data[3])/3600))+ c
            else:
                data_v=f'\n–∑–∞—â–µ–ª –≤ —á–∞—Ç {datetime.fromtimestamp(data[3]).strftime('%Y-%m-%d %H:%M:%S')} ({i})'
        bot.reply_to(message,f'—Ç–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{data[0]}\n—Å–æ–æ–±—â–µ–Ω–∏—è:{data[2]}') # \n–∑–∞ –¥–µ–Ω—å:{data[4]}{data_v}
    else: 
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")  
#    else:
#        bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç'][random.randint(0,4)])

@bot.message_handler(commands=['–≥–æ–π–¥–∞','goida'])
def handle_goida(message):
    if time.time() - message.date <= 60:
        bot.reply_to(message,['–Ω–∞—à —Å–ª–æ–Ω','–ì–û–û–û–û–û–û–õ','–¥–∞ –±—É–¥–µ—Ç –∂–µ –≥–æ–π–¥–∞','–¥–µ—Ä–∂–∏ –≥–æ–π–¥—É'][random.randint(0,3)])

@bot.message_handler(commands=['bambambam'])
def handle_warn(message):
    if time.time() - message.date >= 60:
        return
    if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
        if message.reply_to_message:
            if message.from_user.id =='5806296576':
                bot.reply_to(message,['–º–∞–≥–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å','–º–∞–≥–∞ –ø–æ–∫–∞—Ä–∞–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –º—É—Ç–æ–º!'][random.randint(0,1)])
            else:
                bot.reply_to(message,["–∫—Ç–æ —Ç–æ –ø–æ—Ö–æ–∂–µ —Å–µ–±—è –ø–ª–æ—Ö–æ –≤–µ–ª",'–∞–π –∞–π –∞–π','–∞–Ω—É–∫–∞ —á—Ç–æ –æ–Ω–∏ —Ç–∞–º —Ç–≤–∞—Ä—è—Ç','—á—Ç–æ —Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?'][random.randint(0,3)])
        else:
            if message.from_user.id =='5806296576':
                bot.reply_to(message,['–º–∞–≥–∞ —á—Ç–æ —Ç–∞–∫–æ–µ','–∫—Ç–æ —Ç–æ –æ–ø—è—Ç—å –±–µ—Å–ø—Ä–µ–¥–µ–ª—å–Ω–∏—á—è–µ—Ç'][random.randint(0,1)])
            else:    
                bot.reply_to(message,['—á—Ç–æ —Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –º–∏—Å—Ç–µ—Ä –∞–¥–º–∏–Ω','bam bam –±—É–º –±—É–º','–≥–ª–¥–∞–≤–Ω–æ–µ –Ω–µ —Å–ø–∞–º—å!','–∞–Ω—É –∫–∞ —á—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–≥–æ'][random.randint(0,3)])
    else:
        bot.reply_to(message,['—á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ','–∫—Ç–æ —Ç–æ –ø–ª–æ—Ö–æ —Å–µ–±—è –≤–µ–ª?','–≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–ø–∞–º—å !','–±–æ–Ω—å–∫',] [random.randint(0,3)])
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
def send_reminder():
    chat_id = '-1002170027967'# –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot.send_message(chat_id, '')
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
#schedule.every().day.at("12:00").do(send_reminder)

@bot.message_handler(commands=['ban','–±–∞–Ω'])
def handle_warn(message):
        commad=str(message.text).lower()
        if BAN_AND_MYTE_COMMAND !=True:
            bot.reply_to(message,'–æ—Ç–∫–ª—é—á–µ–Ω–æ , –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–∏—Ç–µ—Ä (–≤ settings.json) ban_and_myte_command –∫–∞–∫ true')
            return
        if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
            if message.reply_to_message:
                if 'reason:' in commad:
                    reason=commad.split('reason:')[1]
                else :
                    bot.reply_to(message,'SyntaxError\n–Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ reason:\n–ø—Ä–∏–º–µ—Ä:`/–±–∞–Ω reason:–ø—Ä–∏—á–∏–Ω–∞`',parse_mode='MarkdownV2')
                try:
                    bot.ban_chat_member(message.chat.id,message.reply_to_message)
                    logger.info(f'ban for {message.reply_to_message.from_user.username}\nreason:{reason}')
                    bot.send_message(admin_grops,f'ban for {message.reply_to_message.from_user.username}\nreason:{reason}')
                except telebot.apihelper.ApiTelegramException:
                    bot.reply_to(message,'error>> elebot.apihelper.ApiTelegramException\n–≤–µ—Ä–æ—è—Ç–Ω–æ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            else:bot.reply_to(message,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –±–∞–Ω')
        else:
            bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç','—Ç—ã –¥—É–º–∞–ª —Å–º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∏ –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞–∏–≤–Ω—ã–π'][random.randint(0,5)])

@bot.message_handler(commands=['mute','–º—É—Ç'])
def handle_warn(message):
        commad=str(message.text).lower()
        if BAN_AND_MYTE_COMMAND !=True:
            bot.reply_to(message,'–æ—Ç–∫–ª—é—á–µ–Ω–æ , –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–∏—Ç–µ—Ä (–≤ settings.json) ban_and_myte_command –∫–∞–∫ true')
            return
        if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id ==5194033781:
            if message.reply_to_message:
                wirning=None
                if 'reason:' in commad and 'time:'in commad:
                    finds = re.findall(r'(\breason:\b|\btime:\b)', commad, re.IGNORECASE)
                    if format(finds[0])== 'reason:':
                        arg=commad.replace("/mute", "").replace("/–º—É—Ç", "").split('time:')
                        timer=arg[1]
                        reason=arg[0]
                    else:
                        arg=commad.replace("/mute", "").replace("/–º—É—Ç", "").split('reason:')
                        timer=arg[0]
                        reason=arg[1]
                    if '.' in timer: 
                        deleu=timer.split('.')[1] 
                        num_date=int(re.sub(r'\D', '',timer.split('.')[0])) #—É–±–∏—Ä–∞–µ–º –±—É–∫–≤—ã –∏ —Ç.–¥
                        if deleu=='h' or deleu=='d' or deleu=='m' or deleu=='s':
                            if deleu=='h':
                                deleu=3600
                            elif deleu=='d':
                                deleu=86400
                            elif deleu=='m':
                                deleu=60
                            elif deleu=='s':
                                deleu=0
                    else:
                        wirning+=f'–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ({deleu}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —á–∞—Å–∞—Ö)\n–ø—Ä–∏–º–µ—Ä: `/–º—É—Ç reason:–ø—Ä–∏—á–∏–Ω–∞ time:1.h` \n.h - —á–∞—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) , .d - –¥–Ω–∏ , .m - –º–∏–Ω—É—Ç—ã '
                        deleu=3600
                else:
                    error=''
                    if 'reason:' not in commad :
                        error+=' –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ `reason:`'
                    if 'time:' not in commad :
                        if len(error)>1:
                            error+=','
                        error+=' –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ `time:`'
                    bot.reply_to(message,f'SyntaxError\n{error}\n–ø—Ä–∏–º–µ—Ä: `/–º—É—Ç reason:–ø—Ä–∏—á–∏–Ω–∞ time:1.h` \n.h - —á–∞—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) , .d - –¥–Ω–∏ , .m - –º–∏–Ω—É—Ç—ã',parse_mode='MarkdownV2')
                    return
                #time=re.sub(r'.*?time:', '', time, 1)# —É–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ time:
                try:
                    bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=time.time() + num_date*deleu)
                    logger.info(f'ban for {message.reply_to_message.from_user.username}\n{reason}')
                    bot.send_message(admin_grops,f'myte for {message.reply_to_message.from_user.username}\ntime:{num_date} ({num_date*deleu}) {reason}')
                    if wirning != None:
                        bot.reply_to(message,wirning)
                except telebot.apihelper.ApiTelegramException:
                    bot.reply_to(message,'error>> elebot.apihelper.ApiTelegramException\n–≤–µ—Ä–æ—è—Ç–Ω–æ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            else:bot.reply_to(message,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã—Ç–∞—Ç—å –º—É—Ç')
        else:
            bot.reply_to(message,['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç','—Ç—ã –¥—É–º–∞–ª —Å–º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∏ –∑–∞–º—É—Ç–∏—Ç—å –Ω–∞–∏–≤–Ω—ã–π'][random.randint(0,5)])

@bot.message_handler(commands=['cmd','console'])
def handle_warn(message):
    try:
        if CONSOLE_CONTROL:
            if str(message.chat.id)==admin_grops or message.from_user.id == 5194033781:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status in ['creator','administrator'] or message.from_user.id == 5194033781:
                    command=str(message.text).split(' ')[1]
                    if sys.platform.startswith('win'): # –∫—Ä–æ—Å—Å –ø–ª–æ—Ç—Ñ–æ—Ä–º–∏–Ω–æ—Å—Ç—å
                        result=subprocess.run(command , shell=True, stdout=subprocess.PIPE, text=True)
                        out=result.stdout
                    else:
                         result=subprocess.run(command , shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                         out=result.stdout + result.stderr 
                    bot.reply_to(message, out if out !=None else 'None')
                else:
                    if message.date - time.time()<=60:
                        bot.reply_to(['—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','—Ç—ã –Ω–µ –∞–¥–º–∏–Ω','–Ω–µ –∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–Ω–µ—Ç','–∞–π –∞–π –∞–π —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º –∏–≥—Ä–∞—Ç—å—Å—è '][random.randint(0,5)])
            else:
                if message.date - time.time()<=60:
                    bot.reply_to(message,'—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        else:
            if message.date - time.time()<=60:
                bot.reply_to(message,'–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö(settings.json) –ø–∞—Ä–∞–º–∏—Ç–µ—Ä console_control')
    except:
        bot.reply_to(message,traceback.format_exc())
        
@bot.message_handler(commands=['t','translate'])  
def translitor(message):
    if message.reply_to_message:
        bin=str(message.reply_to_message.text).replace(' ','')
        if set(bin) == {'0', '1'} :
            bytes_list = [int(bin[i:i+8], 2) for i in range(0, len(bin), 8)]
            bot.reply_to(message,bytes(bytes_list).decode('utf-8', errors='replace'))
            return
        elif bin[0:6] == '0a2e14':
            bot.reply_to(message, bytes.fromhex(bin).decode('utf-8'))
            return
            
        translator = Translator()
        conf = translator.detect(message.reply_to_message.text)
        kont=f'–Ø–∑—ã–∫: {conf.lang}'
        result = translator.translate(message.reply_to_message.text, src=conf.lang, dest='ru')
        bot.reply_to(message,kont+'\n'+str(result.text))
    else:
        if ':' in message.text:
            try:
                text=str(message.text).replace('/t','').replace('/translite','').split(':')
                if text[1].lower()=="bin":
                    hex_str = binascii.hexlify(text[0].encode('utf-8')).decode()
                    binary_str = ''.join([
                    format(int(hex_str[i:i+2], 16), '08b') 
                    for i in range(0, len(hex_str), 2)
                        ])
                    bot.reply_to(message, ' '.join([binary_str[i:i+8] for i in range(0, len(binary_str), 8)]))
                    return
                elif text[1].lower()=="hex":
                    bot.reply_to(message, '0a2e14'+(text[0].encode("utf-8").hex().replace("'",'')))
                    return
                translator = Translator()
                conf = translator.detect(str(message.text))
                result = translator.translate(text[1], src=conf.lang, dest=text[0].replace(' ',''))
                bot.reply_to(message,result.text)
            except ValueError:
                bot.reply_to(message,'–ø–æ—Ö–æ–∂–µ —è–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ —è–∑—ã–∫ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ —Ç–∞–∫: en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π')

def audio_conwert(data,format,inp_format='save.ogg'):
        """
        audio_conwert(data,format)
        
        :param1: binaru music data
        
        :param2: convert format data `mp3`
        
        :return: binaru converts data or error
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ ffmpeg
            if sys.platform.startswith('win'):
                ffmpeg=os.path.join(os.getcwd(), 'asets' ,'ffmpeg-master-latest-win64-gpl-shared','bin','ffmpeg.exe') # –¥–ª—è windows
            else:
                ffmpeg=os.path.join(os.getcwd(), 'asets' ,'ffmpeg-master-latest-linuxarm64-lgpl','bin','ffmpeg') # –¥–ª—è Linux
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open('save.ogg', 'wb') as f:
                f.write(data)
                
            if not os.path.exists(ffmpeg):
                logger.error(f'no file {ffmpeg} please download full asets file')
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            mes=subprocess.run([
                ffmpeg,
                '-i', inp_format,
                '-ar', '16000',  # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                '-ac', '1',      # –º–æ–Ω–æ-–∞—É–¥–∏–æ
                '-y',            # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                f'out.{format}'
            ], check=True,stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            if os.path.exists(f'out.{format}'):
                with open(f'out.{format}', 'rb') as f:
                    return f.read()
            else:
                logger.warning(f'no file out.{format}')
                raise EOFError(f'–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª out.{format} –µ–≥–æ —á—Ç–µ–Ω–∏–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ')
            os.remove(f'out.{format}')
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} –≤—ã—Ö–æ–¥ ffmpeg>{mes.stdout + mes.stderr}"
        finally: 
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for f in [inp_format, f'out.{format}']:
                try:
                    if os.path.exists(f):
                        os.remove(f)
                except:
                    pass

def video_to_audio_conwert(data,format):
        """
        audio_conwert(data,format)
        
        :param1: binaru music data
        
        :param2: video (`mp4`) convert to audio file 
        
        :return: binaru converts data or error
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ ffmpeg
            if sys.platform.startswith('win'):
                ffmpeg=os.path.join(os.getcwd(), 'asets' ,'ffmpeg-master-latest-win64-gpl-shared','bin','ffmpeg.exe') # –¥–ª—è windows
            else:
                ffmpeg=os.path.join(os.getcwd(), 'asets' ,'ffmpeg-master-latest-linuxarm64-lgpl','bin','ffmpeg') # –¥–ª—è Linux
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open('save.mp4', 'wb') as f:
                f.write(data)
                
            if not os.path.exists(ffmpeg):
                logger.error(f'no file {ffmpeg} please download full asets file')
            codec = {
            "ogg": "libopus",
            "mp3": "libmp3lame",
            "wav": "pcm_s16le",
            "aac": "aac",
            "flac": "flac",
            "m4a": "aac",}
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            mes=subprocess.run([
                ffmpeg,
                '-i', 'save.mp4',
                '-vn',
                '-acodec', codec[format], # MP3 encoder
                '-q:a', '2',              # Quality (0-9, 2=high)
                '-y',
                f'out.{format}'
            ], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            if os.path.exists(f'out.{format}'):
                with open(f'out.{format}', 'rb') as f:
                    return f.read()
            else:
                logger.warning(f'no file out.{format}')
                raise EOFError(f'–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª out.{format} –µ–≥–æ —á—Ç–µ–Ω–∏–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ')
            os.remove(f'out.{format}')
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} –≤—ã—Ö–æ–¥ ffmpeg>{mes.stdout + mes.stderr}"
        finally: 
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for f in ['save.mp4', 'out.mp3']:
                try:
                    if os.path.exists(f):
                        os.remove(f)
                except:
                    pass

@bot.message_handler(commands=['to_text'])
def audio_to_text(message):
    mes=None
    if message.reply_to_message :
        if message.reply_to_message.voice:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk
                model_path = os.path.join(os.getcwd(), 'asets', "vosk-model-small-ru-0.22")
                if not os.path.exists(model_path):
                    logger.warning(f"–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}")
        
                rec = KaldiRecognizer(Model(model_path), 16000)
                file_info = bot.get_file(message.reply_to_message.voice.file_id)
                ogg_data = bot.download_file(file_info.file_path)
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                results = []
                data_r=audio_conwert(ogg_data,'wav')
                if type(data_r)!='bytes':
                    logger.error(data_r)
                wav_buffer = io.BytesIO(data_r) # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ wav
                while True:
                    data = wav_buffer.read(4000)
                    if not data:
                        break
                    if rec.AcceptWaveform(data):
                        results.append(json.loads(rec.Result()))
        
                final = json.loads(rec.FinalResult())
                text = " ".join([res.get("text", "") for res in results if "text" in res] + [final.get("text", "")])
                bot.reply_to(message, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")
        elif message.reply_to_message.photo:
            pass # —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª(—Å–ø–∏–∑–¥–∏–ª –∫–æ–¥) –∏–∑ –∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫   
    else:
        bot.reply_to_message(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /to_text –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
@bot.message_handler(commands=['download','dow'])
def download(message):
    if message.reply_to_message:
            if message.reply_to_message.sticker:
                if len(list(str(message.text).split(' ')))<2:
                    #bot.reply_to(message,"–Ω–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä: /download png ")
                    #return
                    output_format='PNG'
                else:
                    output_format=str(message.text).split(' ')[1].upper()
                sticker_id = message.reply_to_message.sticker.file_id
                # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å, –≥–¥–µ –ª–µ–∂–∏—Ç —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –°–µ—Ä–≤–µ—Ä–µ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞
                file_info = bot.get_file(sticker_id)
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ "–∑–∞–≥—Ä—É–∂–∞–µ–º" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º  –∏–∑ –±–∞–π—Ç–æ–≤ 
                with Image.open(io.BytesIO(requests.get(f'https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}', file_info.file_path.split('/')[1], allow_redirects=True).content)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    if output_format in ('JPEG', 'JPG'):
                        img = img.convert('RGB')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                output_buffer = io.BytesIO()
                if "resize:" in message.text:
                    rise=str(message.text).split('resize:')[1]
                    # print(rise.split(',')[0],rise.split(',')[1])
                    img.resize(rise.split(',')[0],rise.split(',')[1])
                try:
                    img.save(output_buffer, format=output_format)
                except KeyError:
                    bot.reply_to(message,f'–æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º {output_format} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                bot.send_document(message.chat.id, output_buffer.getvalue() ,reply_to_message_id=message.message_id,visible_file_name=f'sticker_{datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M')}.{output_format}')
            elif message.reply_to_message.voice:
                if len(list(str(message.text).split(' ')))<2:
                    bot.reply_to(message,"–Ω–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä: /download mp3 ")
                    return
                output_format=str(message.text).split(' ')[1].lower()
                if output_format in ['mp3','wav','aac','ogg','flac','wma','aiff','opus','alac','mp2']:
                    file_info = bot.get_file(message.reply_to_message.voice.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    bot.send_document(message.chat.id, audio_conwert(downloaded_file,output_format) ,reply_to_message_id=message.message_id ,visible_file_name=f'voice_{datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M')}.{output_format}')
                else:
                    bot.reply_to(message,'—Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ—Ç–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—å—Å—è')
            elif message.reply_to_message.video:
                if len(list(str(message.text).split(' ')))<2:
                    bot.reply_to(message,"–Ω–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä: /download mp3 ")
                    return
                oformat=list(str(message.text).split(' '))[1]
                file_info = bot.get_file(message.reply_to_message.video.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                if oformat in ["ogg","mp3","wav","aac","flac","m4a"]:
                    bot.send_document(message.chat.id, video_to_audio_conwert(downloaded_file,'mp3') ,reply_to_message_id=message.message_id ,visible_file_name=f'music_{datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M')}.{oformat}')
                else:
                    bot.reply_to(message,'—Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ—Ç–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—å—Å—è')
            else:
                bot.reply_to(message,'–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—é')
    else:
        bot.reply_to(message,'–æ—Ç–≤–µ—Ç–µ –Ω–∞ –ì–° –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å')
        
@bot.message_handler(commands=['blaklist'])
def download(message):
    if message.reply_to_message.sticker and message.reply_to_message:
        if not os.path.exists(os.path.join(os.getcwd(), 'asets', "blacklist.json")):
            logger.warning('no file blacklist.json')
            with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'w') as f:
                json.dump([], f)
        with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'r') as f:
            blist = json.load(f)['stiker']
    
        sticker_id = message.reply_to_message.sticker.file_id
        if sticker_id not in blist:
            blist.append(sticker_id)
    
        with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'w') as f:
            json.dump({'stiker':blist}, f)
        bot.send_message(admin_grops,f'—Å—Ç–∏–∫–µ—Ä (id:{message.reply_to_message.sticker.file_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
    
    else:
        bot.reply_to(message,'–æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä —á—Ç–æ –±—ã –≤–Ω–µ—Å—Ç–∏ –µ–≥–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ')
    
@bot.message_handler(commands=['unblaklist'])
def download(message):
    if message.reply_to_message.sticker and message.reply_to_message:
        if not os.path.exists(os.path.join(os.getcwd(), 'asets', "blacklist.json")):
            logger.warning('no file blacklist.json')
            with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'w') as f:
                json.dump([], f)
        with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'r') as f:
            blist = json.load(f)['stiker']
    
        blist=list(blist).remove(message.reply_to_message.sticker.file_id)# —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ 

        with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'w') as f:
            if len(blist)<1:
                blist=[0]
            json.dump({'stiker':blist}, f)
        bot.send_message(admin_grops,f'—Å—Ç–∏–∫–µ—Ä (id:{message.reply_to_message.sticker.file_id}) —É–±—Ä–∞–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞')
    
    else:
        bot.reply_to(message,'–æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä —á—Ç–æ –±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞')
            

class DeleteData:
    def __init__(self):
        self.message_l = []
        self.chat_id = None
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
delete_data = DeleteData()

def nacase(message, delete_message=None):
    try:
        user_messages[message.from_user.id] = []
        the_message = str(message.chat.id).replace("-100", "")
        
        if bool(bambam): 
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 24 —á–∞—Å–∞
            bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                until_date=int(time.time()) + 86400, 
                can_send_messages=False
            )
            data_base(message.chat.id, message.from_user.id, ps_reputation_upt=3)
            bot.send_message(
                message.chat.id, 
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—é @{message.from_user.username} –≤—ã–¥–∞–Ω –º—É—Ç –Ω–∞ 1 –¥–µ–Ω—å."
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_msg = (
            f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >> @{message.from_user.username}\n'
            f'–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text if message.content_type == "text" else message.content_type}'
            f'|https://t.me/c/{the_message}/{message.message_id}'
        )
        
        if delet_messadge and delete_message:
            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(
                "–£–¥–∞–ª–∏—Ç—å —Å–ø–∞–º", 
                callback_data=f"delete_spam_{message.chat.id}"
            )
            markup.add(button)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            delete_data.message_l = delete_message
            delete_data.chat_id = message.chat.id
            bot.send_message(admin_grops, admin_msg, reply_markup=markup)
        else:
            bot.send_message(admin_grops, admin_msg)
        
        logger.info(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >> @{message.from_user.username}, id: {message.from_user.id}')
        
    except telebot.apihelper.ApiTelegramException as e:
        bot.send_message(admin_grops, f'{str(e)}\n–í–µ—Ä–æ—è—Ç–Ω–æ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        logger.error(f'{str(e)}\n–í–µ—Ä–æ—è—Ç–Ω–æ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
    except Exception as e:
        bot.send_message(admin_grops, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_spam_'))
def handle_spam_deletion(call):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (call.from_user.id not in [5194033781] and bot.get_chat_member(call.message.chat.id, call.from_user.id).status not in ['creator', 'administrator']):
            bot.answer_callback_query(
                call.id,
                text=random.choice(['–¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!','–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤–µ—Ä—à–∞—Ç –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ','–¢—ã –Ω–µ –∞–¥–º–∏–Ω','–ù–µ–∞, —Ç–µ–±–µ –Ω–µ–ª—å–∑—è','–ù–µ—Ç']),
                show_alert=False
            )
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if not hasattr(delete_data, 'message_l') or not delete_data.message_l:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        deleted_count = 0
        for msg_id in delete_data.message_l:
            try:
                bot.delete_message(delete_data.chat_id, msg_id)
                deleted_count += 1
            except:
                continue
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.answer_callback_query(call.id, f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count}/{len(delete_data.message_l)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        bot.answer_callback_query(call.id,f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_spam_deletion: {str(e)}")
        
@bot.message_handler(commands=['ping'])
def ping_command(message):
    if '-help' in message.text:
        bot.reply_to(message, '–∞—Ä–≥—É–º–µ–Ω—Ç—ã: /ping —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é https://ya.ru ,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∑–∞–º–µ—Ä–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ , —Ä–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞ True - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏ —Å—Ç–∞—Ç–∏—Å—á–∏—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ —É–∫–∞–∑—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ) –æ—Ç–æ–±—Ä–æ–∂–µ–Ω–∏–µ –∑–∞–∂–µ—Ä–∂–∫–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏')
    data=str(message.text).split(' ')
    if len(data)>1:
        command=data[1]
    else:
        url='https://ya.ru'
        start_time = time.time()
        response=requests.get(url)
        if response.status_code==200:
            scode= ''
        else:
            scode=f'\nerror conect\nstatus code {response.status_code}'
        p_time=time.time() - start_time
        bot.reply_to(message,'ping:'+p_time+scode)
        return
    parm=command.split(',')
    regim=False
    if len(parm) >= 2:
        povt = int(parm[1])
    else:
        povt = 1
    if len(parm) >= 3:
        regim=parm[2]
    if bool(regim):
        p_time=0
    else:
        p_time=[]
    for i in range(povt):
        start_time = time.time()
        response=requests.get(parm[0])
        if response.status_code==200:
            scode= ''
        else:
            scode=f'\nerror conect\nstatus code {response.status_code}'
        if bool(regim):
            p_time+=time.time() - start_time
        else:
            p_time.append(time.time() - start_time)
    if bool(regim):
        bot.reply_to(message,f'ping:{round(p_time/povt,4)}s{scode}')
    else:
        out=''
        for i in range((len(p_time))):
            out+=f'[{i}] ping: {round(p_time[i],5)}s\n' 
        bot.reply_to(message,out+scode)
        
        
user_messages = {}#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –∏ —Ç–ø
user_text = {}
message_text=[]
#SPAM_LIMIT = 8 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
#SPAM_TIMEFRAME = 4  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∞–º–∞
s_level=0
tekst_m=[]
delete_message=[]
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def anti_spam(message):
    #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–µ–Ω–∏ –≤—Å—è–∫–æ–π     
    user_id = message.from_user.id
    current_time = time.time()
    tekst_m.append({message.text:message.message_id})
    user_text[user_id] = tekst_m  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ id
    keys_to_delete=[]
    
    data_base(message.chat.id,message.from_user.id,soob_num=1)# –¥–æ–±–æ–≤–ª—è–µ–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ 
   
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id] = [
        [ts, msg_id] 
        for [ts, msg_id] in user_messages[user_id] 
        if current_time - ts < SPAM_TIMEFRAME
    ]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞
    user_messages[user_id].append([current_time, message.message_id])
    
    emoji=''
    if message.content_type=='sticker':
        emoji='( '+message.sticker.emoji+' )'
    logs = f"chat>>{message.chat.id} user >> tg://user?id={message.from_user.id}, @{message.from_user.username} | —Å–æ–æ–±—â–µ–Ω–∏–µ >>\n{message.text if message.content_type == 'text' else message.content_type} {emoji}"
    print("‚Äî‚Äî‚Äî‚Äî")
    logger.debug(logs)
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if len(user_messages[user_id]) > SPAM_LIMIT:
        for i in user_messages[user_id]:
            delete_message.append(i[1])
        nacase(message,delete_message)
        #bot.delete_message(message.chat.id,message.message_id)
        return
    if len(list(user_text.keys()))>0 and user_text[list(user_text.keys())[0]] != None and  message.text:
        paket_num=4
        sr_d,slova=0,[]
        keys_to_delete=[]
        list_mess=[]
        for i in range(len(user_text.keys())):
            mess=list(user_text[list(user_text.keys())[i]])
            for temp_list_mess in list(user_text[list(user_text.keys())[i]]):
                list_mess.append(list(temp_list_mess.keys())[0])# –¥–æ—Å—Ç–∞—é —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–æ–≤–ª—è—é list_mess
            povtor_messade_shet=0
            k=0
            for a in range(len(list_mess)):
                k=a-1
                if k<len(list_mess) or len(list_mess)>k:
                    k=0
                if str(list_mess[k]).lower() == str(list_mess[a]).lower():
                    povtor_messade_shet=povtor_messade_shet+povtor_messade_shet
                if povtor_messade_shet>=SPAM_LIMIT:
                    keys_to_delete.append(list(user_text.keys())[i])
                    nacase(message,[message.message.id])
                s_level=0
                list_povt_slov=[]
                if list_mess[a]!=None:
                    text_s=str(list_mess[a])
                    if str(text_s)==list_mess[0] and len(list_mess)>=1:
                        s_level+=1
                    if len(text_s)>=300:
                        s_level+=1
                    if list_mess.count(" ")<=round(len(text_s)/10):# –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                        s_level+=1
                    if len(text_s)>=20+SPAM_LIMIT:
                        slova=list(str(text_s).split(' '))
                        for s in range(len(slova)):
                            slova.append(slova[s].split(',')[0])
                            sr_d=+len(slova[s])
                        if  len(slova) !=0 and sr_d !=0 and len(slova)>len(text_s)-sr_d/len(slova):
                            s_level+=sr_d/len(slova)
                cours=0
                for l in range(round(len(str(list_mess[a]))/paket_num)):
                    text=''
                    text = str(list_mess[a])[cours:cours + paket_num]
                    list_povt_slov.append(text)
                    cours += paket_num
                bambamSpamerBlat=0
                for b in range(len(list_povt_slov)):
                    if list_povt_slov[b]==list_povt_slov[0]:
                        bambamSpamerBlat=bambamSpamerBlat+1
                if bambamSpamerBlat>SPAM_LIMIT:
                    keys_to_delete.append(list(user_text.keys())[i])
                    nacase(message,[message.message.id])
        #print(list_povt_slov)# debug
        #print(list(user_text.keys())[i])
        #print(s_level)
            if s_level>=len(list_povt_slov) and len(list_povt_slov)>=5:
                keys_to_delete.append(list(user_text.keys())[i])
                print(mess[list(user_text.keys())[i]])
                nacase(message,[message.message.id])
    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    for key in range(len(keys_to_delete)):
        if key != None:
            del user_text[keys_to_delete[key]]
    #print(datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')) –≤—ã–≤–æ—Ç –¥–∞—Ç—É –Ω–∞ –±—É–¥—É—é—â–µ–µ
    
text={}
warn=0
def anti_spam_forward(message,text=text,warn=warn):
    text[message.from_user.id] = str(message.text).lower().replace(' ','')
    counts = Counter(text.values())
    warn = sum(v-1 for v in counts.values())  # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if warn > SPAM_LIMIT:
        nacase(message)
        text={}
    if time.time()-message.date>=30:
        text={} 

@bot.message_handler(content_types=['text','sticker'])
def message_handler(message):
    if message.sticker:
        if not os.path.exists(os.path.join(os.getcwd(), 'asets', "blacklist.json")):
            logger.warning('no file blacklist.json')
            with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'w') as f:
                json.dump([], f)
        with open(os.path.join(os.getcwd(), 'asets', "blacklist.json"), 'r') as f:
            blist = json.load(f)['stiker']
        if message.sticker.file_id in blist:
            if bool(delet_messadge):
                try:
                    bot.delete_message(message.chat.id,message.message_id)
                    bot.send_message(admin_grops,f'–∑–∞–ø—Ä–µ—â–µ–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –æ—Ç @{message.from_user.username} —É–¥–∞–ª–µ–Ω')
                except telebot.apihelper.ApiTelegramException:
                    bot.reply_to(message,'error>> elebot.apihelper.ApiTelegramException\n–≤–µ—Ä–æ—è—Ç–Ω–æ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
    teg=''
    commad=str(message.text).lower()
    if "[help]" in commad or "[Help]" in commad:     
        id_help_hat=str(message.chat.id).replace("-100", "")
        for i in range(len(admin_list)):
            if i >0:
                teg+=f",{admin_list[i]}"
            else:
                teg+=f"{admin_list[i]}"
        bot.send_message(admin_grops,  f"{teg} –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username} \n–≤–æ—Ç –æ–Ω: https://t.me/c/{id_help_hat}/{message.message_id}")# —ç—Ç–æ –Ω–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –≥–∞–≤–Ω–æ –Ω–æ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if commad=='!—è' and message.reply_to_message != True:
        send_statbstic(message)
        
    if time.time() - message.date >= SPAM_TIMEFRAME:
        data_base(message.chat.id,message.from_user.id,soob_num=1)# –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–ª–∏—Å—å
        
    elif message.forward_from:
        anti_spam_forward(message)
    else:
        anti_spam(message)

@bot.message_handler(content_types=['video','photo','animation'])
def message_handler(message):
    if time.time() - message.date >= SPAM_TIMEFRAME or message.media_group_id != None:
        return
    else:
        anti_spam(message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def other_message_handler(message):
    if time.time() - message.date >= SPAM_TIMEFRAME or message.forward_date and message.forward_from and message.forward_from_chat:
        return
    anti_spam(message)

#–Ω–æ–≤—ã–π —é–∑–µ—Ä 
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    for new_member in message.new_chat_members:
        logger.info(f'new member in chat | user name> {message.from_user.username}')
        data_base(message.chat.id,new_member.id,time_v=time.time())
        try:
            input_gif_path = os.path.join(os.getcwd(),'asets','hello.gif')
            output_gif_path = 'output.gif'
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            gif = Image.open(input_gif_path)
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
            frames_with_text = []
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            try:
                font = ImageFont.truetype(os.path.join(os.getcwd(),'asets','Roboto_Condensed-ExtraBoldItalic.ttf'), 35)
            except IOError:
                font = ImageFont.load_default(size=35)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
            for frame in range(gif.n_frames):
                gif.seek(frame)
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä
                new_frame = gif.copy()
            #    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ rgba 
                new_frame = new_frame.convert('RGBA')
                draw = ImageDraw.Draw(new_frame)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
                usernameh=message.from_user.first_name
                ot=26-len(usernameh)
                otstup=' '*ot
                text = f"–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç  \n{otstup}{usernameh}" 
                text_position =(60, 300) # –ü–æ–∑–∏—Ü–∏—è (x, y) –¥–ª—è —Ç–µ–∫—Å—Ç–∞        
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–¥—Ä
                draw.text(text_position, text, font=font, fill=(21,96,189))  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–¥—Ä –≤ —Å–ø–∏—Å–æ–∫
                frames_with_text.append(new_frame)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π GIF —Å —Ç–µ–∫—Å—Ç–æ–º
            frames_with_text[0].save(output_gif_path, save_all=True, append_images=frames_with_text[1:], loop=0)
            try:
                with open('output.gif', 'rb') as gif_file:
                    bot.send_animation(chat_id=message.chat.id, animation=gif_file, reply_to_message_id=message.message_id)
                os.remove('output.gif') 
            except Exception as e:
                bot.send_message(message.chat.id,f'—É–ø—Å –æ—à–∏–±–∫–∞\n error>>{e} \n@HITHELL —á–∏–Ω–∏!')
        except Exception as e:
            logger.error(f'error hello message >>{e}')
            username = '@'+new_member.username if new_member.username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            welcome_message = [f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç! \n/help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",f"~–Ω–æ–≤–µ–Ω—å–∫–∏–π —Å–∫–∏–Ω—å –Ω–æ–∂–∫–∏~\n–ü—Ä–∏–≤–µ—Ç, @{username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç! \n/help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"][random.randint(0,1)]
            bot.reply_to(message , welcome_message, parse_mode='MarkdownV2')
            
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    try:
        print("\033[32m{}\033[0m".format('–Ω–µ—Ç –æ—à–∏–±–æ–∫ :3 '))
        while True:
            try:
                try:
                    bot.polling(none_stop=True)
                    schedule.run_pending()
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
                    #scheduler_thread = threading.Thread(target=update_user)
                    #scheduler_thread.daemon = True
                    #scheduler_thread.start()
                except requests.exceptions.ReadTimeout:
                    print("time out")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e} , {traceback.format_exc()}")
                time.sleep(3)
    except Exception as e:
        bot.send_message(admin_grops,'–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ\n'+e)
if __name__ == '__main__':
    main()
    
    
